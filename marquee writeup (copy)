Project: News and stock ticker

Ever looked at a scrolling LED marquee, displaying news headlines and other worldly information, and thought, "hey. I'd be cool to have one of those".  Well, as a little project we've built one from the ground up, hardware, firmware, drivers and all. Hopefully these notes will provide you with some direction if you want to embark on a similar project. 

Contents:
-- Software
-- -- Scraping news headlines
-- -- Collecting stock data
-- -- Custom bitmap fonts
-- -- A terminal news and stock ticker
-- Hardware
-- -- Overview
-- -- Charlieplexing
-- -- PCB design
-- -- Part sourcing
-- -- Assembly
-- -- Cleaning the boards
-- Firmware
-- -- Software serial
-- -- Driving a charlieplexed array

-- Software

This section covers the software section, and the construction of a functional news and stock ticker that runs in a terminal window. Later, we'll connect this up to a serial driver to send information to our scrolling marquee. I use a collection of python scripts to grab data from online, store it locally, and prepare it for a scrolling amarquee.

-- -- Scraping news headlines

By far the easiest place to scrape is Reddit, which provides an SPI for grabbing the headlines form any of its sub-reddits. I focus on worldnews and news for now. You can ger more intuition by looking at the source of ###, but briefly, these lines will give you a list of top posts from a given subreddit in python:

import json
json.load(urlopen("http://www.reddit.com/r/SUBREDDIT/top/.json"))['data']['children']

To pull out the post title from a post "child", use

title = child['data']['title']

To scrape from Al Jazeera, I used the rather brittle approach of looking for table data and recognizing the CSS class used to format headline strings. 

-- -- Collecting stock data

The python module <a href="http://goldb.org/ystockquote.html">ystockquote</a> can be used to pull stock prices and other information from Yahoo finance. I'm not sure how picky Yahoo is about scraping, but since the stock prices aren't updated terribly often, we can be conservative about our price polling and go easy on their servers. 

-- -- Custom bitmap fonts

So! Now we have a script that will look around online and collect some maybe useful information. Before we can proceed, we need a way of translating that data into a format that we can send to a scrolling marquee. One simple way is to just send columns of pixels to the marquee which scroll in from the write. Since my arquee is only 5 pixels high, I can send an entire column in one byte over serial. So, I chose to define a bitmap font where the characters are a series of columns. To make this, I opened up an image in Gimp and drew a collection of characters by hand. I thn use this Jython script to open the PNG and convert it to a list of character column data. 

-- -- A terminal news and stock ticker

To test it all out, we have a small terminal app which reads in the news data and scrolls it across the screen. This is really a hasty hack before proceeding to the hardware marquee. It demonstrates parsing the bitmap font file and translating the news string into a sequence of pixel data to be scrolled across the screen. It's been tested only on linux. 

-- Hardware

This section covers the hardware design and concepts -- including how we lay out and connect a jillion little LEDs without going insane, and drive them all with a modest 10 IO pins on an AtTiny24.

-- -- Overview

Overall, the board design concept is thus: We have a 5x18 array of 90 3mm LEDs for the display, which are driven by 10 pins on an AtTiny24 using charlieplexing. We use the one remaining free IO pin to listen on a serial line, and a USB to TTL serial converter to connect it up to a machine to recieve data. Thats about it!. 

-- -- Charlieplexing

Charlieplexing is a useful way of driving a ton of LEDs form ver few pins. <a href="http://en.wikipedia.org/wiki/Charlieplexing">The wiki page</a> probably explians this better than I ever could.  Essentially, since LEDs only light up when current is passed in one direction, you can place two LEDs for every unique pair of IO lines at your disposal. This lets you drive N*(N-1) LEDs from N IO pins. This sounds complicated, but if you're familiar with multiplexing ther's a simple way to think of charlieplexing. When you multiplex an NxN grid of LEDs, you use N IO lines to control power to the cathodes ( minus end / ground ) of the LEDs, and N IO lines to control power to the anodes ( plus ends ) of the LEDs. You make a little NxN grid, where, for example, all LEDs in the Ith row connect to the Ith (-) line, and all LEDs in the Jth column connect to the Jth (+) line. To go from multiplexing to charlieplexing, note that microcontroller pins can take on three sates : Low (-), High (+), and Off ("high impedence" / "high z"). This means that each IO line can serve as both a (+) line and a (-) line, if we hook things up right. What happens if we use the same N pins to drive both the cathodes and the anodes of a multiplexed display? Everything works fine, as long as we use the "Off" state to stop current! There is one hitch though: there are some LEDs along the diagonal of the matrix that have their anodes and cathodes driven by the same IO pin -- there is no way to make these light up. But, no worries, since we are laying out our own board, we can just delete these! So, charlieplexed PCB design can be relatively simple: lay out a grid of LEDs as if you were to multiplex them, but connect the N anodes to the N cathodes, and delete the N leds that end up being connected to the same IO line at both ends!

-- -- PCB design

If you're doing this project yourself, it is possible to wire up the grid of LEDs on, say, a protoboard, by hand. However, this is a huge pain -- I did this once and have vowed never to do it again in my life. Instead of going through the tedium of wiring everything by hand, you can design a custom board and get it professionally fabricated at a batch PCB service. I use the free version of <a href="http://www.cadsoftusa.com/">Eagle Cad</a> to design and prepare boards for manufacture. A full Eagle tutorial is beyond the scope of this writeup, but numerous tutorials can be found online. Of interest is the fact that I was too lazy to lay out a matrix of LEDs on my own, so I wrote a Python script to generate a series of Eagle commands to do it for me. The reason I chose Python instead of Eagle's built in scripting language is that I am already familiar with Python, and so it was more expedient for scripting. 

As a final note, you also want to add a capacitor across the Â± power lines to reduce supply noise, and add a 1kOhm or 10kOhm pull up resistor for the reset pin. 

-- -- Exporting gerber files for board fabrication

One you have finalized and routed your board, you need to prepare design files to send to get the board fabricated. By far my favorite tutorial for this is on <a href="http://hackaday.com/2009/01/15/how-to-prepare-your-eagle-designs-for-manufacture/">Hackaday</a>. PCB designs get exported to so called "Gerber" files, which are like the PDFs of circuit board design. Once you have these files you can send them off to a fab house for production. For one-off boards, <a href="https://www.batchpcb.com/">BatchPCB</a> is the go-to place. For small runs, consider <a href="http://www.4pcb.com/">Advanced Circuits</a> or <a href="http://www.seeedstudio.com/depot/fusion-pcb-service-p-835.html?cPath=185">Seeed studio's Fusion PCB service</a>. For larger runs (>30), depending on board size, <a href="http://www.goldphoenixpcb.com/">Goldphoenix</a> is the place to go. Depending on which service you choose, you should get boards in a few days to five weeks. I went with Seeed because it is relatively cheap, and it took about a month to ship to the US. 

-- -- Part sourcing

For cheap LEDs I head to Ebay -- so far I've been reasonable pleased and only had one incorrect order out of dozens. For all other components ( especially the AVR microcontollers ), I source from Mouser or Digikey. For a low cost USB to Serial adaptor, look for "USB To RS232 TTL PL2303HX" on Ebay -- these are cheaper than, say, an FTDI cable from Sparkfun, and have worked great for me.

-- -- Assembly

Soldering a million LEDs is tricky. I laser-cut a bracket to hold all the LEDs in place, then soldered them in one go. Patience ! Also, pay attention to LED orientations -- they will only work one way and putting a single LED in backwards can confused the carlieplexed driving. As a slightly unusual design choice, I opted to solder a SMT Attiny directly over a couple LEDs. This is tricky and definitely wouldn't work for pick and place assembly, so its probably not something I will do again. 

-- -- Cleaning the boards

After you're finished soldering, you should remove any solder flux adhered to the board. Apart from being unsightly, flux can be conductive and corrosive and damage the board over time. <a href="http://hackaday.com/2011/06/07/cleaning-flux-from-pcbs-the-easy-way/">Hackaday has a good tutorial<a/> on this. Personally, I filled an old (clean) pickle jar with 90% Isopropanol, dunked the boards in there, and shook them around for a while -- it seems to have worked wonderfully.

-- Firmware
-- -- Software serial

The Attiny24 does not have <a href="http://en.wikipedia.org/wiki/Universal_asynchronous_receiver/transmitter">hardware support for serial ( UART )</a>, so we'll have to make do with a software approximation. The Attiny24 is a 14 pin microcontroller. Two of those pins are used for power, and one is reserved for reset, leaving us 11 free IO pins. We are already using 10 to drive the LEDs leaving just one pin free for recieving serial data -- perfect. I'm going to implement software serial using polling -- a more robust solution would be to wait for a pin change interrupt

-- -- Driving a charlieplexed array
-- -- Compiling with avr-gcc
-- -- Uploading with avr-isp-MKII



